@precedence {
	Centered @cut
	Centered @left
	TitlePage @cut
	SceneNumber
	Speech @left
	Speech @cut
	dial @cut
	Parenthetical @left
	OpenParen @left
	OpenParen @cut
	CloseParen @left
	Note @left
	OpenNote @left
	CloseNote @left
	SceneHeading
	Lyric @left
	Transition @left
	Transition @cut
	Act @left
	Sequence @left
	SceneHeading
	Scene @left
	Character @left
	Transition @left
	BoneYard
	BYOpen @left
	BYClose @left
	PageBreak @left
	Synopsis @left
	Text @left
	scriptbody
	Text @left
	hash
	fmt
	Action 
	
	// char @right
}

// @skip {  } { NewLine {"\n"}}

@top FountainScript {
	TitlePage*
	scriptbody+
}

scriptbody {
	(Act | Sequence | Scene)?
	SceneHeading SceneNumber?
	(Transition | Parenthetical | Character  |
		Lyric | Centered | Note | BoneYard | 
		PageBreak | Synopsis | Speech)+
}

TitlePage { !TitlePage TitlePage2 }
SceneHeading { desensitizedSceneHeading }

BoneYard {	!BYOpen BYOpen char+ !BYClose BYClose }

Transition { !Transition somethingTransition }

Character { !Character charc+ Parenthetical* "\n" }
Speech { !Speech text2 "\n" }

Parenthetical {
	!Parenthetical  OpenParen 
	ParenContent { Text | fmt } 
	CloseParen "\n"
}

Centered { !Centered ">" (Text | fmt) "<" }

Act {  !Act hash Text }
Sequence { !Sequence hash hash Text }
Scene { !Scene hash hash hash Text }


// Section { Act | Sequence | Scene }
Synopsis { !Synopsis syn (Text | fmt) "\n" } 

Lyric { !Lyric lyrc Text "\n"}

Note { !Note "[[" Text ("\n")* "]]" "\n" }

// LineBreak {   }
PageBreak { !PageBreak pb }

multiline<expr> { expr (expr)+}

// composites
// Action { Text | fmt }
// @detectDelim


@tokens {
	//tp<word> { @specialize[@name={word}]<word, > }
	SceneNumber { hash snc+ hash }
	snc {
		std.digit | "." | "-"
	}
	lyrc { "~" }

	Bold {  "**" char+ "**" }
	Italic { "*" char+ "*" }
	Underline { "_" char+ "_" }

	OpenParen[@name=Parenthetical] { "(" }
	CloseParen[@name=Parenthetical] { ")" }
	
	OpenNote[@name=Note] { "[[" }
	CloseNote[@name=Note] { "]]" }
	BYOpen[closedBy="BYClose"] { "/*" }
	BYClose[openedBy="BYOpen"] { "*/" }

	uc { std.asciiUppercase+ }
	charc {uc | "^" | " " "." | OpenParen | CloseParen}
	hash { "#" }
	fmt { Underline | Bold | Italic }
	Text { char+ }
	text2 { fmt | Text }
	ws { std.whitespace | std.whitespace+ | std.whitespace++ | " " | "\r" | "\n" }
	char {
		$[\u{20}-\u{10fffe}]
	}
	syn { "==" }
	pb {"===" "="*}
	// transition {
	// 	(("FADE" whitespace ("TO BLACK" | "OUT") | "CUT TO BLACK") | char+ "TO:") | (">" whitespace* char+)
	// }
	@precedence {
		fmt syn pb ">" "<"
		charc SceneNumber hash "[[" "]]" OpenParen CloseParen lyrc BYOpen BYClose uc "\n" 
		whitespace char Text text2
	}
}

@external specialize {Text} somethingTransition from "./tokens" {somethingTransition}
@external specialize { text2 } somethingTransition from "./tokens" {
	TitlePage2
}
@external specialize { Text } desensitizedSceneHeading from "./tokens" {
	desensitizedSceneHeading
}
